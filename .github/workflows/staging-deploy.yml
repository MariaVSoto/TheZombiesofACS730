name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: "Terraform Deployment"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_DIR: Terraform/${{ inputs.environment || 'production' }}
      TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Workspace
        run: |
          terraform workspace select ${{ inputs.environment || 'production' }} || \
          terraform workspace new ${{ inputs.environment || 'production' }}
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
        working-directory: ${{ env.TF_DIR }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tf.plan
        working-directory: ${{ env.TF_DIR }}

  ansible:
    needs: terraform
    name: "Ansible Configuration"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws

      - name: Wait for EC2 Instances
        run: sleep 90

      - name: Run Ansible Playbook - Bastion
        working-directory: ./Ansible
        run: ansible-playbook -i inventory/aws_ec2.yml playbooks/bastion.yml

      - name: Run Ansible Playbook - Webservers
        working-directory: ./Ansible
        run: ansible-playbook -i inventory/aws_ec2.yml playbooks/webserver.yml

  notify:
    needs: [terraform, ansible]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const terraform_status = '${{ needs.terraform.result }}';
            const ansible_status = '${{ needs.ansible.result }}';
            const environment = '${{ inputs.environment || 'production' }}';
            
            let status = '✅ Deployment Successful!';
            if (terraform_status !== 'success' || ansible_status !== 'success') {
              status = '❌ Deployment Failed!';
            }
            
            const message = `### Deployment Status to ${environment}
            - Terraform: ${terraform_status}
            - Ansible: ${ansible_status}
            
            ${status}`;
            
            console.log(message);
