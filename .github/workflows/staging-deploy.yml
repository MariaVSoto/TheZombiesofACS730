name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod
  push:
    branches: [ staging, prod ]
    paths:
      - 'Terraform/**'
      - 'Ansible/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform:
    name: "Terraform Deployment"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || (github.ref == 'refs/heads/prod' && 'prod') || 'staging' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_VAR_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
    defaults:
      run:
        working-directory: Terraform/${{ inputs.environment || (github.ref == 'refs/heads/prod' && 'prod') || 'staging' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9

      - name: Terraform Format
        run: terraform fmt -check -recursive || true

      - name: Terraform Init
        run: terraform init

      - name: Select Terraform Workspace
        run: |
          terraform workspace select ${{ inputs.environment || 'staging' }} || \
          terraform workspace new ${{ inputs.environment || 'staging' }}
      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -input=false -no-color -out=tf.plan

      - name: Debug Plan File Existence
        run: |
          if [ -f tf.plan ]; then
            echo "Plan file exists!"
          else
            echo "Plan file does not exist!"
            exit 1
          fi
      - name: Terraform Apply
        if: |
          (github.ref == 'refs/heads/staging' && inputs.environment == 'staging') ||
          (github.ref == 'refs/heads/prod' && inputs.environment == 'prod')
        run: terraform apply -input=false -auto-approve tf.plan

  ansible:
    needs: terraform
    name: "Ansible Configuration"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'staging' }}
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Set AWS EC2 dynamic inventory permissions
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/config
          echo "region = us-east-1" >> ~/.aws/config
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          
      - name: Install Ansible Collections
        run: ansible-galaxy collection install amazon.aws

      - name: Setup SSH Configuration
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/zombieacs730
          chmod 600 ~/.ssh/zombieacs730
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config

      - name: Wait for instances to be ready
        run: |
          echo "Waiting for instances to be in running state..."
          aws ec2 wait instance-running \
            --region us-east-1 \
            --filters "Name=tag:Name,Values=zombies-webserver2" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text

      - name: Wait for SSH to be available
        run: |
          for ip in $(aws ec2 describe-instances \
            --region us-east-1 \
            --filters "Name=tag:Name,Values=zombies-webserver2" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text); do
            
            echo "Waiting for SSH connection on $ip..."
            until nc -zv -w 5 $ip 22; do
              sleep 10
              echo "Still waiting for SSH on $ip..."
            done
            echo "SSH available on $ip"
          done

      - name: Verify Dynamic Inventory
        working-directory: ./Ansible
        run: |
          ansible-inventory -i inventory/aws_ec2.yml --graph
          ansible-inventory -i inventory/aws_ec2.yml --list

      - name: Run Ansible Playbook - Bastion
        working-directory: ./Ansible
        run: ansible-playbook -i inventory/aws_ec2.yml playbooks/bastion.yml

      - name: Run Ansible Playbook - Webservers
        working-directory: ./Ansible
        run: ansible-playbook -i inventory/aws_ec2.yml playbooks/webserver.yml

  notify:
    needs: [terraform, ansible]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const terraform_status = '${{ needs.terraform.result }}';
            const ansible_status = '${{ needs.ansible.result }}';
            const environment = '${{ inputs.environment || 'staging' }}';
            let status = '✅ Deployment Successful!';
            if (terraform_status !== 'success' || ansible_status !== 'success') {
              status = '❌ Deployment Failed!';
            }
            const message = `### Deployment Status to ${environment}\n- Terraform: ${terraform_status}\n- Ansible: ${ansible_status}\n\n${status}`;
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
  promote-to-prod:
    name: Promote to Production
    needs: [terraform, ansible]
    if: ${{ github.ref == 'refs/heads/staging' && success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Production Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Infrastructure Deployment"
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: prod
          inputs: |
            environment: prod
