name: Infrastructure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches: [ staging, Kevin ]
    paths:
      - 'Terraform/**'
      - 'Ansible/**'

permissions:
  contents: read
  pull-requests: write
  issues: write
  
jobs:
  terraform:
    name: "Terraform Deployment"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'staging' }}
      DEPLOY_ENV: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: true

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        working-directory: ./Terraform

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./Terraform/${{ env.DEPLOY_ENV }}

      - name: Select Terraform Workspace
        run: |
          terraform workspace select $TF_WORKSPACE || terraform workspace new $TF_WORKSPACE
        working-directory: ./Terraform/${{ env.DEPLOY_ENV }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./Terraform/${{ env.DEPLOY_ENV }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
          terraform show -no-color tf.plan > plan.txt
        working-directory: ./Terraform/${{ env.DEPLOY_ENV }}
        continue-on-error: true

      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('Terraform/${{ env.DEPLOY_ENV }}/plan.txt', 'utf8');
            const maxLength = 65536;
            const chunks = [];
            
            for (let i = 0; i < plan.length; i += maxLength) {
              chunks.push(plan.slice(i, i + maxLength));
            }
            
            for (let i = 0; i < chunks.length; i++) {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: `### Terraform Plan (Part ${i + 1}/${chunks.length})\n\`\`\`\n${chunks[i]}\n\`\`\``
              });
            }

      - name: Terraform Apply
        if: |
          (github.ref == 'refs/heads/staging' && github.event_name == 'push') ||
          (github.event_name == 'workflow_dispatch')
        run: terraform apply -input=false -auto-approve tf.plan
        working-directory: ./Terraform/${{ env.DEPLOY_ENV }}

      - name: Verify Deployment
        if: success()
        run: |
          echo "Verifying infrastructure deployment..."
          terraform output -json > tf_output.json
        working-directory: ./Terraform/${{ env.DEPLOY_ENV }}

  ansible:
    needs: terraform
    name: "Ansible Configuration"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    if: success()

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore

      - name: Install Ansible Collections
        run: ansible-galaxy collection install amazon.aws

      - name: Wait for EC2 Instances
        run: |
          echo "Waiting for EC2 instances to be ready..."
          sleep 90

      - name: Run Ansible Playbook - Bastion
        working-directory: ./Ansible
        run: |
          ansible-playbook -i inventory/aws_ec2.yml playbooks/bastion.yml
        continue-on-error: false

      - name: Run Ansible Playbook - Webservers
        working-directory: ./Ansible
        run: |
          ansible-playbook -i inventory/aws_ec2.yml playbooks/webserver.yml
        continue-on-error: false

      - name: Verify Web Services
        if: success()
        run: |
          echo "Verifying web services..."
          # 这里可以添加检查 web 服务是否正常运行的命令

  notify:
    needs: [terraform, ansible]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Deployment Status
        uses: actions/github-script@v6
        with:
          script: |
            const terraform_status = '${{ needs.terraform.result }}';
            const ansible_status = '${{ needs.ansible.result }}';
            const environment = '${{ github.event.inputs.environment || 'staging' }}';
            
            let status = '✅ Deployment Successful!';
            if (terraform_status !== 'success' || ansible_status !== 'success') {
              status = '❌ Deployment Failed!';
            }
            
            const message = `### Deployment Status to ${environment}
            - Terraform: ${terraform_status}
            - Ansible: ${ansible_status}
            
            ${status}`;
            
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: message
              });
            }
        
